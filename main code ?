import pygame
import random  

pygame.init() # initalises pygame
screen = pygame.display.set_mode((1280, 720)) #sets the size of the screen
pygame.display.set_caption("poker screen") # sets the caption of the screen
blue = (21, 76, 121) # a constant blue rgb value
deck = []


# this will loads an image that is already dowloaded and resizes it from a image of free sprites
startIMG = pygame.image.load('start.png').convert_alpha() #makes it easier to manage pngs by converting the surfaces to the same pixel format as used by the screen
statsIMG = pygame.image.load('stats.png').convert_alpha()
optionsIMG = pygame.image.load('options.png').convert_alpha()

startIMG = pygame.transform.scale(startIMG, (400, 200)) # this sets the size of the image
optionsIMG = pygame.transform.scale(optionsIMG, (400, 100))
statsIMG = pygame.transform.scale(statsIMG, (400, 100))


class Button:
  def __init__(self, x, y, image):
    self.image = image 
    self.rect = self.image.get_rect() # creates a py game rectangle so it can help with positioning
    self.rect.topleft = (x, y) # when we have this set up with top left it allows us to us this as the base of a an image, rather than setting each point

  def draw(self, surface):
    surface.blit(self.image, (self.rect.x, self.rect.y))#allows us to draw on top of an image (our screen)

  def is_clicked(self):
    #checks if the left mouse button is pressed and mouse is over the button
    if pygame.mouse.get_pressed()[0]: # detects if a left click is pressed
      if self.rect.collidepoint(pygame.mouse.get_pos()): # this line checks if the event that has taken place has happened in the rectangle
        return True
    return False

class Screen():
  def __init__(self):
    self.font = pygame.font.Font(None, 74) # this line caused so many issues
  def main_menu(self):
    screen.fill((21, 76, 121))
    sb.draw(screen) # these draws the button on the screen
    ob.draw(screen)
    stb.draw(screen)
# the following methods display the screens and the nessecary settings
  def game_screen(self): 
    screen.fill((blue)) 
    text = self.font.render("Game Screen", True, (255, 255, 255))
    screen.blit(text, (500, 300))
#following two are a work in progress now as a) relys on the stats that need to be collected from games b) relates the AI difficultly which has not been coded yet
  def options_screen(self):
    screen.fill((50, 50, 50))  
    text = self.font.render("Options Screen", True, (255, 255, 255))# this is a place holder at the moment where it just displays what the screen is with a piece of text 
    screen.blit(text, (500, 300)) 

  def stats_screen(self):
    screen.fill((0, 0, 128)) 
    text = self.font.render("Stats Screen", True, (255, 255, 255))
    screen.blit(text, (500, 300))

#to address each type of card i will use a set of free sprite and download each image with pygame.image.load([card_name]).convert_alpha()
#these are the cards that will be used in the game and will be randomly selected from the deck to assign to the players

class Deck():
  def __init__(self):
    self.deck = []
    self.create_deck()
    
  def create_deck(self):
    self.deck = []
    for suit in ["C", "D", "H", "S"]: # suit is a variable that will be assigned to each suit of cards
       for j in range(1,14): # value of card 
         if j == 1: # ace
           j = "A"	
         elif j == 11: # jack
           j = "J"
         elif j == 12: # queen
          j = "Q"
         elif j == 13: # king
           j = "K"
         self.deck.append(suit+str(j)) # this combines the suit of card with the value to create each card in a playing deck 
    return self.deck
  def shuffle_deck(self): # this shuffles the deck to randomise the order of the cards
    random.shuffle(self.deck)
    return self.deck
  def deal_card(self, holder):
    for i in range(2):
      card = self.deck[random.randint(0, len(self.deck)-1)]
      holder.hand.append(card)

class Player():
  def __init__(self, name, chips, win, loss):
    self.name = name
    self.hand = []
    self.chips = chips
    self.win = win
    self.loss = loss
    self.id = 0
    def bet(self):
      pass 
    def fold(self):
      pass
  



# creates the buttons from the button class
sb = Button(440, 280, startIMG)
ob = Button(440, 470, optionsIMG)
stb = Button(440, 580, statsIMG)

screens = Screen() # object
cards = Deck() #card objec 
current_screen = "main_menu" # this is the screen that is currently being displayed which will always start on the main menu 

# main game loop
game = True
print(cards.deck)
print(len(cards.deck))
player1 = Player("Player 1", 1000, 0, 0) # this is the player object that will be used to store the players name, chips and wins and losses
cards.deal_card(player1) 
print(player1.hand)

while game:
  #screen change
  if current_screen == "main_menu":
    screens.main_menu()
  elif current_screen == "game":
    screens.game_screen()
  elif current_screen == "options":
    screens.options_screen()
  elif current_screen == "stats":
    screens.stats_screen()
  pygame.display.flip()

 

  # Event handler (when the exit button is pressed)
  for event in pygame.event.get():
    if event.type == pygame.QUIT:
      run = False
      pygame.quit()

  # checks if a button is pressed and if it is then it will call the method that relates to the aformentioned button
  if current_screen == "main_menu":
    if sb.is_clicked():
      current_screen = "game"
    elif ob.is_clicked():
      current_screen = "options"
    elif stb.is_clicked():
      current_screen = "stats"
print(deck)
